<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >	
	
	
	
<mapper namespace="com.web.epictrip.dao.Schedule_dao">

	<!-- 상세화면 -->
	<select id="schedule_Dt" resultType="scheduledt" parameterType="string">
		SELECT
		    p.schedule_key,
		    u.name,
		    TO_CHAR(p.startdate+pp.day_num-1,'yyyy-mm-dd') AS daydate,
		    pp.day_num,
		    pl.name AS place_name,
		    pl.lat,
		    pl.lng,
		    pl.loc,
		    pp.Schedule_Place_key
		FROM
		    Schedule p
		JOIN
		    UserInfo u ON p.userid = u.userid
		JOIN
		    Schedule_Place pp ON p.schedule_key = pp.schedule_key
		JOIN
		    Place pl ON pp.place_key = pl.place_key
		WHERE
		    p.schedule_key = #{schedule_key}
		ORDER BY
			day_num
	</select>
	
	<!-- 상세보기 -->
	<select id="schedule_Dt02" resultType="Schedulesel" parameterType="string">
		SELECT p.schedule_key ,u.name , p.userid,p.loc,p.loc02,
		TO_CHAR(p.startdate,'yyyy-mm-dd') AS startdate,TO_CHAR(p.enddate,'yyyy-mm-dd') AS enddate,p.hits 
		FROM Schedule p 
		JOIN userinfo u ON u.USERid = p.USERid
		WHERE p.schedule_key = #{schedule_key}
	</select>

	<!-- 조회수 업 -->
	<update id="scheduleUpHits" parameterType="string">
		UPDATE Schedule 
		SET hits = hits + 1
		WHERE schedule_key = #{schedule_key}
	</update>

	<!-- 작성화면 지역보기 -->
	<select id="placeInfo" resultType="place" parameterType="place">
		SELECT * FROM place WHERE loc = #{loc} and name LIKE '%'||#{name}||'%'
	</select>

<!-- 스케쥴 인서트 -->
<insert id="scheduleIns01" parameterType="scheduleins01">
    <!-- 시퀀스 값을 생성하여 스케쥴 키를 얻기 위해 selectKey 사용 -->
    <selectKey keyProperty="schedule_key" resultType="java.lang.String" order="BEFORE">
        SELECT 'shl_' || Schedule_seq.nextval FROM dual
    </selectKey>
    INSERT INTO schedule
    VALUES (#{schedule_key}, #{userid}, sysdate, #{loc}, #{startdate}, #{enddate}, 0,#{loc02})
</insert>

<!-- 스케쥴_플레이스 인서트 -->
<insert id="scheduleIns02" parameterType="scheduleins02">
    INSERT INTO schedule_place (schedule_key, place_key, day_num, schedule_place_key)
    VALUES (#{schedule_key}, #{place_key}, #{day_num}, sp_seq.nextval)
</insert>

<!-- 스케쥴 페이징 -->
	<!-- 리스트 갯수 -->
		<select id="schedule_List_PageCnt" resultType="int" parameterType="product_page">
				SELECT count(*)
				FROM Schedule p
				WHERE 1=1
			        <choose>			        
			        	<!-- keyword에 ""이 아닐 때 (타이틀 검색) -->
				        <when test="keyword neq ''"> 
					        AND loc LIKE '%'||#{keyword}||'%'
			    			order by creatdate desc
				        </when>
			        	<!-- searchType와 keyword가 공백이 아닐때 (타이틀검색 + 조회순) -->
				        <when test="searchType neq '' and keyword neq ''">
				        	AND loc LIKE '%'||#{keyword}||'%'
					        order by hits desc
				        </when>
			        	<!-- searchType가 공백이 아닐때 (조회순) -->
				        <when test="searchType neq ''">
					        order by hits desc
				        </when>
			        	<!-- 모두해당하지 않을때 업데이트 순 -->
		             	<otherwise>
				     		ORDER BY creatdate desc
				    	</otherwise>
			        </choose>
		</select>
		
	<!-- 리스트 내용 -->
		<select id="schedule_List_Page" resultType="schedule_list" parameterType="product_page">
			select *
				from( 
				    select rownum as rnum, 
					t.*
				    from
					    (
				        select 
				        	s.schedule_key, s.userid, s.creatdate, s.loc, to_char(s.startdate,'YYYY-MM-DD') AS startdate,
				        	to_char(s.enddate,'YYYY-MM-DD') AS enddate, TRUNC(s. enddate- s.startdate)+1 as period,
				        	s.hits, u.name, TRUNC(MONTHS_BETWEEN(SYSDATE, u.birth) / 12) AS age, u.image , u.gender
				        from schedule s
				        JOIN userInfo u ON s.userid = u.userid
				        where 1=1
	     			    <choose>			        
				        	<!-- keyword에 ""이 아닐 때 (타이틀 검색) -->
					        <when test="keyword neq ''"> 
						        AND loc LIKE '%'||#{keyword}||'%'
				    			order by creatdate desc
					        </when>
				        	<!-- searchType와 keyword가 공백이 아닐때 (타이틀검색 + 조회순) -->
					        <when test="searchType neq '' and keyword neq ''">
					        	AND loc LIKE '%'||#{keyword}||'%'
						        order by hits desc
					        </when>
				        	<!-- searchType가 공백이 아닐때 (조회순) -->
					        <when test="searchType neq ''">
						        order by hits desc
					        </when>
				        	<!-- 모두해당하지 않을때 업데이트 순 -->
			             	<otherwise>
					     		ORDER BY creatdate desc
					    	</otherwise>
				        </choose>
					    ) t
				    where rownum <![CDATA[<=]]> #{startList} + #{sizePerPage}
				)
			where rnum <![CDATA[>=]]> #{startList}
		</select>


	<!-- 담아줄 세부 내용 -->
		<select id="schedule_list_info" resultType="schedule_list_info" parameterType="string">
			SELECT
				sp.schedule_key, sp.day_num, p.name, p.lat, p.lng
			FROM
			    Schedule_Place sp
			JOIN
			    Schedule s ON s.schedule_key = sp.schedule_key
			JOIN
			    Place p ON sp.place_key = p.place_key
			WHERE
			    sp.schedule_key = #{schedule_key}
		</select>
<!-- 스케쥴 페이징 -->

	<!-- 스케쥴 삭제 -->
	<delete id="Schedule_del" parameterType="Schedulesel">
		DELETE FROM Schedule WHERE schedule_key = #{schedule_key} and userid = #{userid}	
	</delete>
	<delete id="Schedule_place_del" parameterType="Schedulesel">
		DELETE FROM schedule_place WHERE schedule_key = #{schedule_key}
	</delete>

	<!-- 스케쥴 업데이트 -->
	<update id="Schedule_Update01" parameterType="scheduleins01">
		UPDATE schedule SET 
			creatdate = sysdate,
			loc = #{loc},
			startdate = #{startdate},
			enddate = #{enddate},
			loc02 = #{loc02}
		WHERE schedule_key = #{schedule_key}
	</update>
	
	<!-- 삭제하고 다시 넣기 -->
	<delete id="Schedule_Update02" parameterType="string">
		DELETE FROM schedule_place WHERE schedule_key = #{schedule_key}
	</delete>
	
	<!-- 스케쥴_플레이스 인서트 -->
	<insert id="Schedule_Update03" parameterType="scheduleins02">
	    INSERT INTO schedule_place (schedule_key, place_key, day_num, schedule_place_key)
	    VALUES (#{schedule_key}, #{place_key}, #{day_num}, sp_seq.nextval)
	</insert>

</mapper>


